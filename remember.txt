1.ASCII码：65 - A
           97 - a
     97-65=32 - 空格
2.rand()是使用线性同余法做的，它并不是真的随机数，因为其周期特别长，所以在一定范围内可以看成随机的。 
  rand()函数不需要参数，它将会返回0到RAND_MAX之间的任意的整数。
  ――――――――――――――――――――――――――――――――――――――――――――――――――
  srand()为初始化随机数发生器，用于设置rand()产生随机数时的种子。
  传入的参数seed为unsigned int类型，通常我们会使用time(0)或time(NULL)的返回值作为seed。下面我们来进行实验，从而对它进行更深入的感知。
  ――――――――――――――――――――――――――――――――――――――――――――――――――
  srand(time(0));
  for(int i = 0; i < 10; i++)
  {
    printf("第%d次生成的随机数为：%d",i+1,rand());
  }
  关于rand()和srand() - 微念的博客 - CSDN博客  https://blog.csdn.net/u013745804/article/details/82379266
  ――――――――――――――――――――――――――――――――――――――――――――――――――
  rand()取值范围为0-32767
  建议：通过随机函数生成四位整数
  方法可以为：int num=1=rand()%9+1; //1-9之间
  其他三个数字num2,num3,num4为0-9  //rand()%10
3.char sex
  sex = getchar()
  fflush(stdin)
  ―――――――――――――――――――――――――――――――――――――――――――――――――― 
  getchar()是c语言中的一个函数,可以用它来赋一个字符的值。
  C库函数 int getchar(void) 从标准输入 stdin 获取一个字符（一个无符号字符）。这等同于 getc 带有 stdin 作为参数。
  当程序调用getchar时，程序就等待用户按键并将输入的字符被存放在键盘缓冲区中。
  getchar函数的返回值是用户输入的第一个字符的ASCII码,如出错返回-1,且将用户输入的字符回显到屏幕。
  在此之前，如果用户在按回车之前输入了一个以上的字符,那么其他字符会保留在键盘缓存区中,等待后续getchar调用读取。
  也就是说,后续的getchar调用不会等待用户按键,而直接读取缓冲区中的字符,直到缓冲区中的字符读完为后,才等待用户按键。　　
  ――――――――――――――――――――――――――――――――――――――――――――――――――  
  C库函数 int fflush(FILE *stream) 刷新流 stream 的输出缓冲区。
  stream -- 这是指向 FILE 对象的指针，该 FILE 对象指定了一个缓冲流。
  如果成功，该函数返回零值。如果发生错误，则返回 EOF，且设置错误标识符（即 feof）。
4. 指针是一个值为内存地址的变量(或数据对象)
5. & 取地址
   * 根据地址取值
   int * ptr_num = &num;
   指针不可以赋常量 
   二维数组 num[i][j] ----  *(*(num + i)+j)
   一维数组 num[i] ---- *(num+i)
6. //常用内置函数  --- 0表示假，非0表示真
   isalpha(97) //  返回值为0  //   返回字符是否为字母
   isdigit(9) // 返回值为0，即表示不为数字 // 返回字符是否为数字
   isdigit(‘9’） // 返回值为1或其他非0数,即表示为数字
   //如果传入的是数字，表示的是ascii码
    assii码： a对应97,A对应65
   //打印所有ascii码所对应的字符
    for(int i=0;i<127;i++){
        printf("%c",i) ;
    }
9. malloc的全称是memory allocation，即动态分配内存，编译的时候没有内存，程序运行后再分配内存。
   int * nums;
   nums = (int *)malloc(20);
   或nums=(int *)malloc(sizeof(int) * 5);
   同时等价于nums=calloc(5,sizeof(int));//malloc不会初始化数组,calloc会
   //为前面的指针动态分配了20个字节的空间
   //等价于：int nums[5]
   //为指针动态分配空间后，指针就变成了数组
   free(nums);释放动态分配的内存
   nums=null;
6.pow(5,2) --  5^2
7.字符串和字符数组的区别：最后一位是否是空字符'\0'
8.除了高级的可变长数组，一般的数组名隐含了一个特性：常量
  数组的复制原理：每个元素逐个进行复制
9.